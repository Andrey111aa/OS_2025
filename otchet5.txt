Создание программы, где процесс-родитель и процесс-ребеноквыполняют различные действия

Исходный код программы:
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
int main() {
        pid_t prid, parprid;
        int a = 0, c;
        prid = getpid();
        parprid = getppid();
        printf ("До выполнения fork():\n");
        printf("Ид. текущего процесса: %d\n", prid);
        printf("Ид. родительского процесса: %d\n", parprid);
        printf("Начальное значение переменной a: %d\n", a);
        c = fork();
        if(c<0) {
                printf("Ошибка при вызове fork()\n");
                exit(-1);
        }
        else if (c==0) {
                a=a+1;
                prid = getpid();
                parprid = getppid();
                printf ("После выполнения fork() для дочернего процесса: \n");
                printf("Ид. текущего процесса: %d\nИд. родительского процесса: %d\n", prid, parprid);
                printf("Значение переменной a: %d\n", a);
        }
        else {
                printf("Выполнение родительского процесса, порожден процесс с ид. %d\n", c);
                a = a+1000;
                prid = getppid();
                printf("После выполнения fork() для родительского процесса: \n");
                printf("Ид. текущего процесса: %d\nИд родительского процесса: %d\n", prid, parprid);
                printf("Значепние переменной a: %d\n", a);
        }
        return 0;
}

Результат выполнения программы:

До выполнения fork():
Ид. текущего процесса: 13175
Ид. родительского процесса: 13030
Начальное значение переменной a: 0
Выполнение родительского процесса, порожден процесс с ид. 13176
После выполнения fork() для родительского процесса:
Ид. текущего процесса: 13030
Ид родительского процесса: 13030
Значепние переменной a: 1000
Начальное значение переменной a: 0
После выполнения fork() для дочернего процесса:
Ид. текущего процесса: 13176
Ид. родительского процесса: 13175
Значение переменной a: 1

Выводы:
переменная а в родительском и дочернем процессе независимы друг от друга, так как распологаются в разном адресном пространстве
Переменны, где хранятся идентификаторы родительского и дочернего процессов также независимы друг от друга
Родительский процесс получает в качестве значения, возвращаемого системным вызовом fork() идентификаторсвоего дочернего процесса
Дочерний процесс получат в качестве значений 0, возвращаемого вызовом fork()
